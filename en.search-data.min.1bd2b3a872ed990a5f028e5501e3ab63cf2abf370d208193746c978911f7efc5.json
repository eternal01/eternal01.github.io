[{"id":0,"href":"/docs/abort-me/","title":"Resume","section":"Docs","content":"这是我的简历\n"},{"id":1,"href":"/2022/10/mysql/","title":"Mysql","section":"Posts","content":"mysql相关 #  "},{"id":2,"href":"/2022/10/linux/","title":"Linux","section":"Posts","content":"linux相关 #  "},{"id":3,"href":"/2022/10/git/","title":"Git","section":"Posts","content":"Git概念 #  Git安装 #  Git常用命令 #  "},{"id":4,"href":"/2022/10/homebrew/","title":"Homebrew","section":"Posts","content":"Homebrew核心概念 #     词汇 含义     formula(e) 安装包的描述文件，formulae 为复数   cellar 安装好后所在的目录   keg 具体某个包所在的目录，keg 是 cellar 的子目录   bottle 预先编译好的包，不需要现场下载编译源码，速度会快很多；官方库中的包大多都是通过 bottle 方式安装   tap 下载源，可以类比于 Linux 下的包管理器 repository   cask 安装 macOS native 应用的扩展，你也可以理解为有图形化界面的应用   bundle 描述 Homebrew 依赖的扩展    Homebrew安装 #  使用终端执行命令\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; 若以上安装失败，并提醒： Failed to connect to http://raw.githubusercontent.com port 443: Connection refused. 则可以尝试使用国内源进行安装，详情请看 Gitee / CunKai / HomebrewCN。（或者科学上网）  查看安装是否成功\nbrew --version Homebrew切换源 #  Homebrew #  切换中科大源\nexport HOMEBREW_BREW_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/brew.git\u0026#34; brew update 若用户设置了环境变量 HOMEBREW_BREW_GIT_REMOTE，则每次运行 brew update 时将会自动设置远程。 推荐用户将环境变量 HOMEBREW_BREW_GIT_REMOTE 加入 shell 的 profile 设置中。  # 对于 bash 用户 echo \u0026#39;export HOMEBREW_BREW_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/brew.git\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile # 对于 zsh 用户 echo \u0026#39;export HOMEBREW_BREW_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/brew.git\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc 重置为官方地址\nunset HOMEBREW_BREW_GIT_REMOTE git -C \u0026#34;$(brew --repo)\u0026#34; remote set-url origin https://github.com/Homebrew/brew 重置回默认远程后，用户应该删除 shell 的 profile 设置中的环境变量 HOMEBREW_BREW_GIT_REMOTE 以免运行 brew update 时远程再次被更换。 若之前使用的 git config url.\u0026lt;URL\u0026gt;.insteadOf URL 的方式设置的镜像，请手动删除 config 文件（一般为 ~/.gitconfig 或仓库目录下的 .git/config）中的对应字段。  使用中科大源安装Homebrew 首先在命令行运行如下几条命令设置环境变量：\nexport HOMEBREW_BREW_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/brew.git\u0026#34; export HOMEBREW_CORE_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-core.git\u0026#34; export HOMEBREW_BOTTLE_DOMAIN=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#34; 之后在命令行运行 Homebrew 安装脚本：\n/bin/bash -c \u0026#34;$(curl -fsSL https://github.com/Homebrew/install/raw/HEAD/install.sh)\u0026#34; Homebrew-core #  替换中科大源\nexport HOMEBREW_CORE_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-core.git\u0026#34; brew update 若用户设置了环境变量 HOMEBREW_CORE_GIT_REMOTE，则每次运行 brew update 时将会自动设置远程。 推荐用户将环境变量 HOMEBREW_CORE_GIT_REMOTE 加入 shell 的 profile 设置中。  # 对于 bash 用户 echo \u0026#39;export HOMEBREW_CORE_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-core.git\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile # 对于 zsh 用户 echo \u0026#39;export HOMEBREW_CORE_GIT_REMOTE=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-core.git\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc 重置为官方地址：\nunset HOMEBREW_CORE_GIT_REMOTE brew tap --custom-remote homebrew/core https://github.com/Homebrew/homebrew-core 重置回默认远程后，用户应该删除 shell 的 profile 设置中的环境变量 HOMEBREW_CORE_GIT_REMOTE 以免运行 brew update 时远程再次被更换。  Homebrew-bottles #  替换为中科大源\nexport HOMEBREW_BOTTLE_DOMAIN=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#34; # 对于 bash 用户 echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bash_profile # 对于 zsh 用户 echo \u0026#39;export HOMEBREW_BOTTLE_DOMAIN=\u0026#34;https://mirrors.ustc.edu.cn/homebrew-bottles\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc Homebrew-cask #  替换为中科大源\nbrew tap --custom-remote --force-auto-update homebrew/cask https://mirrors.ustc.edu.cn/homebrew-cask.git 重置为官方地址\nbrew tap --custom-remote --force-auto-update homebrew/cask https://github.com/Homebrew/homebrew-cask Homebrew-cask-version #  替换为中科大源\nbrew tap --custom-remote --force-auto-update homebrew/cask-versions https://mirrors.ustc.edu.cn/homebrew-cask-versions.git 重置为官方地址\nbrew tap --custom-remote --force-auto-update homebrew/cask-versions https://github.com/Homebrew/homebrew-cask-versions Homebrew常用命令 #  查找\nbrew search \u0026lt;package\u0026gt; 安装\nbrew install \u0026lt;package\u0026gt; brew install \u0026lt;package\u0026gt; -v #显示详细安装信息 包信息\nbrew info brew info \u0026lt;package\u0026gt; 卸载\nbrew uninstall \u0026lt;package\u0026gt; brew uninstall --force \u0026lt;package\u0026gt; #强制卸载包 重装\nbrew reinstall \u0026lt;package\u0026gt; 列表\nbrew list --version #安装的所有包 brew list --formulae #安装的formule包 brew list --cask #安装的cask包 更新\nbrew update brew update \u0026lt;package\u0026gt; 可更新包列表\nbrew outdated 升级\nbrew upgrade brew upgrade \u0026lt;package\u0026gt; 清理旧版本\nbrew cleanup brew cleanup \u0026lt;package\u0026gt; 锁定包版本\nbrew pin \u0026lt;package\u0026gt; 取消锁定包版本\nbrew unpin \u0026lt;package\u0026gt; 查看已安装的包依赖\nbrew deps --installed --tree Homebrew安装本地包 #   执行以下命令获取包名（哈希值）  brew install \u0026lt;package\u0026gt; -v 通过其他方式下载安装包至本地 执行以下命令，获取brew安装目录  brew --cask 将下载文件迁移至brew下载目录并重命名 再次执行以下命令，因brew从本地找到文件，遂不再下载，直接执行安装  brew install \u0026lt;package\u0026gt; -v "},{"id":5,"href":"/2022/10/golang/","title":"Golang","section":"Posts","content":"golang相关 #  "},{"id":6,"href":"/2022/10/redis/","title":"Redis","section":"Posts","content":"什么是Redis？Redis主要用途是什么？ #  Redis，英文全称是Remote Dictionary Server（远程字典服务），是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。\nRedis数据类型 #    String(字符串)\n  Hash(哈希)\n  List(列表)\n  Set(集合)\n  Zset(有序集合)\n  Geospatial(地理位置)\n  Hyperloglog(基数统计)\n  Bitmap(位图)\n  Streams(流)\n常用命令 #  查找所有符合模式pattern的key。pattern可以使用通配符\nkeys pattern 判断key是否存在于数据库中\nexists key exists key key1 key2 ... #判断key是否存在，返回存在的个数 移动指定的key到指定的数据库实例（Redis默认有16个库），用户默认使用第0个库\nmove key index 查看key的剩余生存时间\nttl key 设置key的最大生存时间\nexpire key seconds 查看指定key的数据类型\ntype key 重命名指定key\nrename key 删除指定key和value\ndel key del key key1 key2 ... 增加指定值\nincrby key num 减去指定值\ndecrby key num 各数据类型应用场景 #    String\nredis最基本的数据类型，二进制安全的字符串，key和字符串类型的value最大为512M，但是一般key不超过1K，节约空间，也利于检索\n 缓存，热点数据 分布式session 分布式锁 incr计数器 全局ID（int类型，incrby,利用其原子性） incr限流（以访问者ip或其他信息为key,访问增加次数，超过一定次数返回false） setbit位操作  常用命令 #  添加数据\nset key value #如果key已存在，之前的value将会被覆盖 获取指定key的值\nget key 追加字符串\nappend key value #返回字符串长度；如果key不存在，则存储为新的key 获取字符串长度\nstrlen key 将value数值加一\nincr key #返回计算后的值；如果该值不是数值，将报错；如果key不存在，则自动存储新的key，并初始化为0，然后加一； 将value数值减一\ndecr key 将value数值加具体值\nincrby key increment 将value数值减具体值\ndecrby key increment 闭区间截取字符串中的一段\ngetrange key startIndex endIndex 替换从指定下标开始的字符串\nsetrange key offset value 添加数据并设置生命周期\nsetex key seconds value 添加key值不存在的数据\nsetnx key value #key值不存在时添加，返回结果1；key值已存在不添加，返回结果0； 批量添加数据\nmset key1 value1 key2 value2 key3 value3 ... 批量获取数据\nmget key1 key2 key3 ... 批量添加key值不存在的数据\nmsetnx key1 value1 key2 value2 ... #所有key都不存在设置成功，只要有一个存在设置失败   Hash\nkey-value键值对形势的集合\n 值为序列化对象时  常用命令 #  将一个或多个键值对存储到指定集合中\nhset key filed value ... 获取hash表中指定的filed值\nhget key filed 批量获取hash表中指定的filed值\nhmget key filed1 filed2 ... 获取指定hash表中的所有filed和value\nhgetall key 删除指定hash表中的一个或者多个filed\nhdel key filed1 filed2 ... 获取指定hash表中所有的filed的个数\nhlen key 判断指定hash表中指定的filed是否存在\nhexists key filed 获取指定hash表中所有filed的列表\nhkeys key 获取指定hash表中所有value的值\nhvals key   List\n保持顺序的字符串列表\n 消息队列 秒杀  常用命令 #  将一个或多个值依次插入列表的表头\nlpush key value1 value2 ... 获取列表中指定下标区间的元素\nlrange key startIndex endIndex 将一个或多个值依次插入列表的表尾\nrpush key value1 value2 ... 删除指定列表的表头元素并返回\nlpop key 删除指定列表的表尾元素并返回\nrpop key 获取指定列表中指定下标的元素并返回\nlindex key index 获取指定列表的长度\nllen key 根据count的值移除列表中的指定的某一些元素\nlrem key count value #count\u0026gt;0:从表头开始数前n个；count\u0026lt;0:从表尾开始数前n个；count=0：移除所有跟value相同的元素   Set\n无序的字符串集合，无重复项\n 无重复项列表  Redis 提供 sinterstore、sunionstore、sdiffstore 命令来将集合的交集、并集、差集的结果保存， Redis 在进行上述比较时，会比较耗费时间，所以为了提高性能可以将交集、并集、差集的结果提前保存起来，这样在需要使用时，可以直接通过 smembers 命令获取\n常用命令 #  将一个或多个元素添加到指定的集合中\nsadd key member1 member2 ... 获取指定集合中的所有元素\nsmembers key 判断指定元素在指定集合中是否存在\nsismember key member #存在返回1，不存在返回0 获取指定集合的长度\nscard key 移除指定集合中一个或者多个元素\nsrem key member1 member2 ... #不存的元素会忽略 随机获取指定集合中的n个元素\nsrandmember key [count] #count不指定，默认为1；count\u0026gt;0：随机获取的数不重复，count\u0026lt;0：随机获取的数可能重复 从指定集合中随机移除一个或者多个元素\nspop key [count] #count不指定，默认为1 从指定集合中移动指定一个元素到另一个集合中\nsmove source destination member 返回差集\nsdiff key1 key2 ... 返回交集\nsinter key1 key2 ... 返回并集\nsunion key1 key2 ...   Zset\n已排序的字符串集合\n 排行榜  常用命令 将一个或者多个member及score加入有序集合\nzadd key score1 member1 score2 member2 ... 根据指定集合获取指定区间的元素\nzrange key startindex endindex 根据指定分数区间获取元素\nzrangebyscore key min max 删除指定集合中一个或多个指定元素\nzrem key member1 member2 ... 获取集合中元素的个数\nzcard key 获取指定元素的排名\nzrank key member #正序 zrevrank key member #倒序 获取指定集合中在指定分数区间的元素个数\nzcount key min max 获取指定集合中的指定元素的分数\nzscore key member   Geospatial\n地理位置信息存储类型\n常用命令\n  Hyperloglog\n基于概率的数据类型\n常用命令\n  Bitmap\n更细化的操作，以Bit为单位\n常用命令\n  streams\n常用命令\n    Redis持久化策略 #  Redis提供持久化策略，用一些适当的手段在适当的时机将数据存在磁盘中，每次启动Redis都会自动加载磁盘的数据到内存中\n  RDB(redis默认持久化策略)\n在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发依次持久化操作。\n 配置属性： save \u0026lt;seconds\u0026gt;\u0026lt;changes\u0026gt;：配置持久化策略 dbfilename：配置redis RDB持久化数据存储的文件 dir：配置redis RDB持久化文件所在目录    AOF\n采用操作日志来记录进行每一次写操作，每次redis服务启动时，都会重新执行一遍操作日志中的命令。效率较低，redis默认不开启。\n 配置属性： appendonly：配置是否开启AOF appendfilename：配置操作日志文件    Redis淘汰策略 #  Redis对比关系型数据库（如Mysql）优势是什么？劣势是什么？对比其他NoSql类型数据库呢？ #   速度快 支持数据类型丰富  "}]