<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 穆小康</title>
    <link>https://eternal01.github.io/posts/</link>
    <description>Recent content in Posts on 穆小康</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Oct 2022 12:36:01 +0000</lastBuildDate><atom:link href="https://eternal01.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>K8s</title>
      <link>https://eternal01.github.io/2022/10/k8s/</link>
      <pubDate>Mon, 17 Oct 2022 12:36:01 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/k8s/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://eternal01.github.io/2022/10/docker/</link>
      <pubDate>Mon, 17 Oct 2022 12:35:48 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/docker/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Mysql</title>
      <link>https://eternal01.github.io/2022/10/mysql/</link>
      <pubDate>Sun, 16 Oct 2022 10:27:37 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/mysql/</guid>
      <description>关系型数据库和非关系型数据库（NoSQL）的区别 #  关系型数据库优点：
 使用关系模型来组织数据，容易理解 可以保持数据的一致性 数据更新的开销较小 支持复杂查询  非关系型数据库优点：
 无需经过SQL层的解析，读写效率高 基于键值对，读写性能高，易于拓展 可以支持多种类型数据的存储，图片、文档等 扩展（可分为内存性数据库以及文档型数据库，比如 Redis，MongoDB，HBase 等，适合场景：数据量大高可用的日志系统/地理位置存储系统）  DCL、DDL、DML #   DCL(DATA CONTROL LANGUAGE) 操作数据库用户、权限等 DDL(DATA DEFINITION LANGUAGE) 操作数据库、表结构、数据类型、表间约束等 DML(DATA MANIPULITION LANGUAGE) 操作数据库数据，增删改查等  Mysql 语句执行过程 #   客户端请求 &amp;mdash;&amp;gt; 连接器（验证用户身份，给予权限） 查询缓存（存在缓存则直接返回，不存在则继续下一步操作） 分析器（对sql进行语法分析等操作） 优化器（对执行的sql优化，选择最优的优化方案执行） 执行器（执行时会先查看用户是否拥有执行权限，调用存储引擎提供的接口） &amp;mdash;&amp;gt; 存储引擎（若开启查询缓存会缓存查询结果）  Mysql 使用索引的原因 #   提高数据查询效率  索引的三种常见数据结构和优缺点 #  三种常见的索引数据结构为哈希表、有序数组和搜索树   哈希表这种数据结构适用于等值查询，不适合范围查询。常用于NoSQL存储引擎。 有序数组只适用于静态存储引擎，等值查询和范围查询性能好，但更新数据成本高 搜索树（N叉树）由于读写性能上的优点以及适配磁盘访问模式，广泛用于关系型数据库存储引擎中  Mysql 索引结构 #  使用二叉树查询的时候，查询的时间复杂度是O(log n)，查询的时间效率已经很快。但是二叉树存在一个问题是，每一个分支上，最多就只有两个分支，当数据量大的时候，就会导致树的高度很高，查询的时候，IO的次数就会增多，查询的效率就会有所下降。使用B树或者B+树，让一个节点，可以有多个分支，可以很好的降低树的高度，减少IO的次数，提升查询的效率。</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://eternal01.github.io/2022/10/linux/</link>
      <pubDate>Sun, 16 Oct 2022 10:27:19 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/linux/</guid>
      <description>shell 选择 #  查看当前系统使用默认shell
echo $SHELL 列出所有可用shell
cat /etc/shells 切换shell为zsh
chsh -s /bin/zsh 安装oh my zsh
sh -c &amp;#34;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&amp;#34; 国内镜像安装
sh -c &amp;#34;$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)&amp;#34; 卸载oh my zsh
uninstall_oh_my_zsh 配置oh my zsh插件
vim ~/.zshrc 修改plugins=(git z extract) z 提供智能跳转，cd加强版 extract 解压缩插件，提供x别名，x解压文件 z,extract为自带插件，直接开启即可，不需要另行安装 </description>
    </item>
    
    <item>
      <title>Git</title>
      <link>https://eternal01.github.io/2022/10/git/</link>
      <pubDate>Sun, 16 Oct 2022 10:25:55 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/git/</guid>
      <description>Git配置 #  git config --global user.name &amp;#34;&amp;#34; git config --global user.email &amp;#34;&amp;#34; #全局配置用户名和邮箱，--global 全局 Git常用命令 #  初始化仓库
git init 添加本地修改至暂存区
git add . #添加所有修改 git add -A #添加所有修改 git add filename #添加具体文件 提交本地修改
git commit -m &amp;#34;描述&amp;#34; 拉取远程文件
git pull originname originbranchname </description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>https://eternal01.github.io/2022/10/homebrew/</link>
      <pubDate>Sun, 16 Oct 2022 08:55:14 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/homebrew/</guid>
      <description>Homebrew核心概念 #     词汇 含义     formula(e) 安装包的描述文件，formulae 为复数   cellar 安装好后所在的目录   keg 具体某个包所在的目录，keg 是 cellar 的子目录   bottle 预先编译好的包，不需要现场下载编译源码，速度会快很多；官方库中的包大多都是通过 bottle 方式安装   tap 下载源，可以类比于 Linux 下的包管理器 repository   cask 安装 macOS native 应用的扩展，你也可以理解为有图形化界面的应用   bundle 描述 Homebrew 依赖的扩展    Homebrew安装 #  使用终端执行命令
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; 若以上安装失败，并提醒： Failed to connect to http://raw.githubusercontent.com port 443: Connection refused.</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://eternal01.github.io/2022/10/golang/</link>
      <pubDate>Sun, 16 Oct 2022 08:38:32 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/golang/</guid>
      <description>Golang 数据类型 #   值类型：string,int,float,bool,array,struct，初始化后内存分配在栈中 引用类型：map,slice,channel，初始化后内存分配在堆中  Golang 中 make 和 new 的区别 #   同为给变量分配内存 make与new对堆栈分配处理是相同的，编译器优先进行逃逸分析，逃逸的才分配到堆上，否则分配于栈中 new 可为所有类型分配内存，并将内存置为零，返回分配类型的指针 make 仅为channel,slice,map分配内存，并进行初始化，返回类型  Golang 中 slice 和 array 的区别 #   均为存储相同类型的一组数据 均可通过下标获取，len获取长度，cap获取容量 数组固定长度，访问和复制超过数组长度会越界，切片容量长度可变 数组是值类型，切片是引用类型，底层指向一个数组，修改切片实际修改的为底层数组，切片扩容后底层数组会改变，内存地址随之改变  for range 时地址会发生变化么 #  for k,v range slice 中，k,v在内存中只会存在一份，每次循环对k,v进行赋值操作，k,v内存地址始终不变，所以如果需要在循环中开启协程，应使用临时变量  defer 什么时候会修改返回值 #   defer执行顺序为LIFO，即先入后出。 defer一般用来做收尾工作，释放资源，紧跟在打开资源后，防止出现内存泄露 defer在操作函数返回有名返回值或者指针时会修改返回值  Golang 中解析 tag 是如何实现的 #  利用反射机制，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力或动态知道给定数据对象的类型和结构，并有机会修改它。反射将接口变量转换成反射对象 Type 和 Value；反射可以通过反射对象 Value 还原成原先的接口变量；反射可以用来修改一个变量的值，前提是这个值可以被修改；注意：反射会一定程度上影响性能 </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://eternal01.github.io/2022/10/redis/</link>
      <pubDate>Sun, 16 Oct 2022 07:07:52 +0000</pubDate>
      
      <guid>https://eternal01.github.io/2022/10/redis/</guid>
      <description>什么是Redis？Redis主要用途是什么？ #  Redis，英文全称是Remote Dictionary Server（远程字典服务），是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。
Redis数据类型 #    String(字符串)
  Hash(哈希)
  List(列表)
  Set(集合)
  Zset(有序集合)
  Geospatial(地理位置)
  Hyperloglog(基数统计)
  Bitmap(位图)
  Streams(流)
常用命令 #  查找所有符合模式pattern的key。pattern可以使用通配符
keys pattern 判断key是否存在于数据库中
exists key exists key key1 key2 ... #判断key是否存在，返回存在的个数 移动指定的key到指定的数据库实例（Redis默认有16个库），用户默认使用第0个库
move key index 查看key的剩余生存时间
ttl key 设置key的最大生存时间
expire key seconds 查看指定key的数据类型
type key 重命名指定key
rename key 删除指定key和value</description>
    </item>
    
  </channel>
</rss>
